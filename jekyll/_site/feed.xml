<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jonathan Torres | Web Developer</title>
    <description>Personal website of Jonathan Torres. A Web Developer.</description>
    <link>http://jonathantorres.com/</link>
    <atom:link href="http://jonathantorres.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 23 Feb 2016 04:39:57 +0000</pubDate>
    <lastBuildDate>Tue, 23 Feb 2016 04:39:57 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Writing open source software is always a good thing.</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/jonathantorres/construct&quot;&gt;Construct&lt;/a&gt; was basically my first open source project and I can honestly say that I learned way much more than I would ever expect and I just wrote it because I had a simple problem and construct just solves it. I hope other people’s problems too. More details about why I built the project in the first place are &lt;a href=&quot;http://www.jonathantorres.com/why-i-built-construct/&quot;&gt;here&lt;/a&gt;. First off, I learned a few tricks about composer and some things that I wasn’t doing well with it, I don’t mean that I was doing them wrong, but thanks to the people contributing to the project I learned a few tricks here and there about it.&lt;/p&gt;

&lt;p&gt;Thanks to writing open source software I also learned how to use semantic versioning well, and a few more tricks about php unit and mocking. I learned more reasons of why is important to have tests in your project, in this project in particular having integration tests helped a lot. They helped me refactor things here and there without the fear of breaking something somewhere else in the code. I refactored stuff as I saw fit without any fear. Just made my tweaks, ran the test suite, and if it passes, it means that I’m good to go.&lt;/p&gt;

&lt;h2 id=&quot;you-will-definitely-learn-new-things&quot;&gt;You will definitely learn new things&lt;/h2&gt;
&lt;p&gt;Writing OSS is always a good thing because you’ll learn things that you had no idea about before. Just as it happened to me. You’ll learn how to use and contribute better with git. Merging pull requests, feature branches. You won’t be doubtful anymore when you need to squash commits or rebase branches. Learning how to do these things effectively on git will help you a LOT when making contribution to other open source projects. You’ll learn about &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;, the continuos integration tool, even though there are many others, just learning how to use travis will set you up on how to better understand all the other related tools that are out there. You’ll see how valuable is for others to see that your tests are passing and gives them a certain confidence that your project is doing what is supposed to do.&lt;/p&gt;

&lt;h2 id=&quot;youll-write-better-documentation&quot;&gt;You’ll write better documentation&lt;/h2&gt;
&lt;p&gt;It certainly helps to put yourself on the shoes of your users. You’ll ask yourself if your public API or your implementation is easy to use. If anything on the usage of your project feels weird, it will help you to be more clear about your intentions. You’ll explain yourself and comunicate better. It certainly did for me.&lt;/p&gt;

&lt;h2 id=&quot;you-may-find-your-dream-job&quot;&gt;You may find your dream job&lt;/h2&gt;
&lt;p&gt;It will greatly help you when you are on the hunt of a new job. Having a decent github profile with various recent projects will certainly help, it may not guarantee you a job, but it would certainly benefit you. It may help you stand above others. Potential employers will be able to see what you’ve been working on and have code samples that you’ve written (specially if the person whom is hiring is also a developer, more than likely will be) which is also important and something that is a must on a job application, besides your resume and cover letter of course.&lt;/p&gt;

&lt;h2 id=&quot;you-meet-people&quot;&gt;You meet people!&lt;/h2&gt;
&lt;p&gt;You’ll connect with new people, specially when they are reporting issues or submitting pull requests. More often than not people that starred your project on GitHub could also follow you on twitter and engage with you about other topics more closely, you may meet these users on conferences and eventually make friends. You’ll certainly connect with other developers that are interested about what you’re doing and invite you to speak at user groups or meetups. That could certainly lead to new oportunities to work on other interesting projects.&lt;/p&gt;

&lt;p&gt;Working on open source software for me personally has been a good thing, and I will continue to do so as much as I can. Write code, tests, documentation, submit issues or help others. Support in any way you can other open source tools that you use on a regular basis. You’ll motivate others to keep doing it and yourself at the same time. Happy coding!&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 22:39:51 +0000</pubDate>
        <link>http://jonathantorres.com/writing-open-source-software-is-always-a-good-thing</link>
        <guid isPermaLink="true">http://jonathantorres.com/writing-open-source-software-is-always-a-good-thing</guid>
        
        
      </item>
    
      <item>
        <title>Waterfall moment: Testing my code</title>
        <description>&lt;p&gt;I’ve been writing code in one form or another for several years now. I started writing code specifically for the web, but so far now I’ve even developed command line tools and API’s. Learning about these things was of course challenging but also fun, but in my opinion something that changed in a whole new level the way I write code (and think about code) is testing. Everytime I worked on a website or application I remember using that refresh button so many times and submitting that form more times than I can remember, just to make sure that it’s working as expected. Specially on the back-end side of things. I worked a few projects with CodeIgniter and I never wrote tests. It wasn’t until I started working with Laravel that I became familiar with “testing” because for me testing something was just writing the code and going to the browser, hit the refresh button and then make sure that everything was working.&lt;/p&gt;

&lt;p&gt;I got curious about it when I got a copy of &lt;a href=&quot;https://leanpub.com/laravel-testing-decoded&quot;&gt;this&lt;/a&gt; book, that’s when I found out that you could write code that the computer would run and you would see if your actual code works as expected. Instead of visiting the browser every time that you made a change. I learned about unit testing, integration and acceptance testing and all the tools and jargon associated with it. It wasn’t easy of course. I think the most difficult thing about testing is learning how to do it well, cause believe me I messed up so many times, spent countless nights figuring out all the jargon associated with testing, mostly because even today we’re still figuring this whole thing out.&lt;/p&gt;

&lt;p&gt;Couple of months ago I was listening to &lt;a href=&quot;http://www.fullstackradio.com/19&quot;&gt;this&lt;/a&gt; podcast episode and mentions that the easiest way to learn about testing is testing at the higher level first (if you’re reading this and you haven’t written a single test before, listen to that particular episode, like right now) meaning that if you’re starting out, write acceptance tests first (tests that interact with the browser, the DOM and checks responses) and then work your way in, to the unit level (tests for your actual classes and business logic). I mention that specifically because I started the other way around and maybe that’s why for me this concept of “testing” was harder to grasp.&lt;/p&gt;

&lt;p&gt;But certainly once you “get it”, you won’t want to test anything manually ever again, I certainly don’t want to, even if in some cases I have to. I’m not saying that testing manually is wrong, because it’s not. You’re still testing your code, but manually. The fact that you can write a program to do it for you is certainly better.&lt;/p&gt;

&lt;h2 id=&quot;testing-has-so-many-benefits&quot;&gt;Testing has so many benefits&lt;/h2&gt;
&lt;p&gt;For me, the most beneficial thing about writing tests is the feeling of confidence when refactoring. Among all the other benefits. I can’t emphasize how beneficial it is. Especially when improving your code. Tests have definitely changed the way I write code. I can’t imagine how I would refactor an 100-line method, or some repetitive code without tests. How could I make sure that the refactor didn’t broke anything? By var_dump(ing) stuff to the browser, and then refreshing, refreshing and refreshing? No, for me those days are gone. Don’t be lazy and test your applications, you’ll sleep better in the end.&lt;/p&gt;

&lt;p&gt;Not to mention when deploying to production. How would you know that that bugfix that you pushed to github didn’t broke anything on your production app? You may have fixed the bug you were currently working on, and made sure (by testing manually) that whatever problem the bug was causing on your codebase is not happening anymore. But how would you know (without tests) that that particular bug fix didn’t introduced another (or several) bugs elsewhere? Crossing your fingers won’t do all the time (lol). Everything might work well on your local environment, but what assurance do you have that it will not blow up once it goes live? Specially if you have clients paying you for whatever it is that you’re building for them. Don’t be lazy and test your applications, it’ll guarantee you a good night’s sleep.&lt;/p&gt;

&lt;p&gt;It might be overwhelming (it was for me) understanding all the do’s and dont’s about testing, mocking, spies etc etc. Today, I’m still learning new things about all this stuff. Invest time on it, it’ll be worth your effort and it will be of great benefit in the end. It will make you write better code, it will help you to find or reproduce bugs faster. It will help you design your API’s better, you’ll sit back and reason better about what you’re trying to accomplish. You’ll rest assured that on each line of code that you change, there’s a test suite there to help you make sure that your changes didn’t broke anything elsewhere on your codebase. Don’t be lazy, write tests and you’ll write better code.&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Oct 2015 20:11:33 +0000</pubDate>
        <link>http://jonathantorres.com/waterfall-moment-testing-my-code</link>
        <guid isPermaLink="true">http://jonathantorres.com/waterfall-moment-testing-my-code</guid>
        
        
      </item>
    
      <item>
        <title>Why I built construct?</title>
        <description>&lt;p&gt;To give you context, construct is a PHP package that generates a basic PHP project. You can use it as a base template when you are starting to create your PHP project. At the core, it’s not tied to any framework (the only dependency is the symfony console component). It creates a base class and a basic test suite with phpunit by default (you can select any other of the supported php testing frameworks) among other things you expect to have. It gives you a foundation on which to create a php package. And that’s it, a class and a test suite with a specific directory structure.&lt;/p&gt;

&lt;h2 id=&quot;now-why-i-did-it&quot;&gt;Now, why I did it?&lt;/h2&gt;
&lt;p&gt;I’m always experimenting and playing with diferent things, since we have tools like composer that you just require some package and it’s downloaded and ready to play with. I found myself repeatedly creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, then a basic class, then a test suite, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; file manually and I just decided to automate the whole thing. Even though it only saves me like 5 minutes, but still it’s time that I can spend doing something else and not on such a mundane task like creating files and folders. Just write the command, specify some extra options (if you want to) and that’s it, a php project template ready for you.&lt;/p&gt;

&lt;p&gt;It’s been almost 5 months since the first release, feedback has been well received, developers have already contributed to the project and I’ve learned a ton about working on open source software. I already have been writing down some ideas for the next major release, these are coming up quite nicely.&lt;/p&gt;

&lt;p&gt;To my surprise, even before I wrote a single line of code I googled all around to see if something similar was already done. I found almost nothing that would meet my needs. I saw a couple of repos with a basic template and some similar things but they had nothing that I could configure dynamically, some things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A project name&lt;/li&gt;
  &lt;li&gt;Main class name&lt;/li&gt;
  &lt;li&gt;Test framework to use&lt;/li&gt;
  &lt;li&gt;Namespaces etc etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I don’t know if amongst the PHP community we have a “standard” structure for a php project. But I hope construct gives a good starting point!&lt;/p&gt;

&lt;p&gt;Construct is proudly hosted on &lt;a href=&quot;https://github.com/jonathantorres/construct&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2015 19:53:41 +0000</pubDate>
        <link>http://jonathantorres.com/why-i-built-construct</link>
        <guid isPermaLink="true">http://jonathantorres.com/why-i-built-construct</guid>
        
        
      </item>
    
  </channel>
</rss>
